<?php

namespace frontend\controllers;


use backend\components\Helper;
use common\models\ChooseItems;
use common\models\ChooseTests;
use common\models\DragLessons;
use common\models\DragTests;
use common\models\LessonGropuRel;
use common\models\LessonsTest;
use common\models\PreTests;
use common\models\PreTestsRes;
use common\models\TestsQuestion;
use common\models\UserTestsState;
use common\models\VideoLesson;
use Yii;
use yii\web\Controller;

/**
 * Site controller
 */
class TestController extends Controller
{

    public function beforeAction($action)
    {
        if (Yii::$app->user->isGuest) {
            return $this->goHome();
        }
        $this->enableCsrfValidation = false;
        $this->layout = 'profile';
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionGlobal($id)
    {
        $first_lesson = LessonsTest::GetFirstTest($id);
        if ($first_lesson['type'] == LessonsTest::TYPE_DRAG) {
            return $this->redirect(['drag', 'id' => $first_lesson['test_id'], 'g' => $id]);
        }
        if ($first_lesson['type'] == LessonsTest::TYPE_CHOOSE) {
            return $this->redirect(['choose', 'id' => $first_lesson['test_id'], 'g' => $id]);
        }
        if ($first_lesson['type'] == LessonsTest::TYPE_VIDEO) {
            return $this->redirect(['video', 'id' => $first_lesson['test_id'], 'g' => $id]);
        }
    }

    public function actionNextLesson($id, $g, $type)
    {
        $all_lessons = LessonsTest::GetTestsByLessonId($g);
        $next_lesson = null;
        foreach ($all_lessons as $k => $lesson) {
            if ($lesson['test_id'] == $id && $lesson['type'] == $type) {
                if (!empty($all_lessons[$k + 1])) {
                    $next_lesson = $all_lessons[$k + 1];
                } else {
                    UserTestsState::UpdateData($g, LessonGropuRel::TYPE_GLOB, 55, 0);
                    return $this->redirect('/lessons');
                }
            }
        }
        if (!empty($next_lesson)) {
            if ($next_lesson['type'] == LessonsTest::TYPE_DRAG) {
                return $this->redirect(['drag', 'id' => $next_lesson['test_id'], 'g' => $g]);
            }
            if ($next_lesson['type'] == LessonsTest::TYPE_CHOOSE) {
                return $this->redirect(['choose', 'id' => $next_lesson['test_id'], 'g' => $g]);
            }
            if ($next_lesson['type'] == LessonsTest::TYPE_VIDEO) {
                return $this->redirect(['video', 'id' => $next_lesson['test_id'], 'g' => $g]);
            }
        }

    }

    public function actionPrimary($id, $l)
    {

        if (Yii::$app->request->post()) {
            PreTestsRes::SaveUserAnswer(Yii::$app->request->post());
            UserTestsState::UpdateData($id, LessonGropuRel::TYPE_PRE, 55, $l);
            return $this->redirect('/lessons');
        }

        return $this->render('primary', [
            'data' => PreTests::GetOne($id),
            'tests' => TestsQuestion::GetTestsQuestionByTestId($id)
        ]);
    }

    public function actionDrag($id, $g)
    {
        $lessons = LessonsTest::GetTestsByLessonId($g);
        $current_lesson = LessonsTest::GetTestsByLessonIdByTestId($g, $id, LessonsTest::TYPE_DRAG);
        return $this->render('drag', [
            'data' => DragTests::GetById($id),
            'items' => DragLessons::GetDragLessonsById($id),
            'count' => count($lessons),
            'current_lesson' => Helper::GetIndex($lessons, $current_lesson),
        ]);
    }

    public function actionChoose($id, $g)
    {
        $lessons = LessonsTest::GetTestsByLessonId($g);
        $current_lesson = LessonsTest::GetTestsByLessonIdByTestId($g, $id, LessonsTest::TYPE_CHOOSE);
        $data = ChooseTests::GetById($id);
        $view = $data['status'] == 0 ? 'choose' : 'choose_2';
        return $this->render($view, [
            'data' => $data,
            'items' => ChooseItems::GetItemsById($id),
            'count' => count($lessons),
            'current_lesson' => Helper::GetIndex($lessons, $current_lesson),
        ]);
    }

    public function actionChoose2()
    {
        $this->layout = false;
        return $this->render('choose_2', [

        ]);
    }

    public function actionVideo($id, $g)
    {
        $lessons = LessonsTest::GetTestsByLessonId($g);
        $current_lesson = LessonsTest::GetTestsByLessonIdByTestId($g, $id, LessonsTest::TYPE_VIDEO);
        return $this->render('video', [
            'data' => VideoLesson::GetById($id),
            'count' => count($lessons),
            'current_lesson' => Helper::GetIndex($lessons, $current_lesson),
        ]);
    }


}
